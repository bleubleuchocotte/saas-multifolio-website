@use "sass:map";
@use "sass:list";

// FONT
@function pxToVw($size, $breakpoint, $coef: 0.8) {
	@return max(#{$size * $coef}px, ($size / $breakpoint) * 100vw);
}

@mixin font($font) {
	@if ($font == "text/p") {
		// mobile-xs, mobile, tablet, desktop
		$base-fs: 18, 18, 18, 18;
		line-height: normal;
		font-weight: normal;

		@each $index, $size in $sizes {
			@media #{map.get($size, "media")} {
				font-size: pxToVw(list.nth($base-fs, $index), map.get($size, "target"));
			}
		}
	} @else if ($font == "title/h1") {
		// mobile-xs, mobile, tablet, desktop
		$base-fs: 45, 45, 45, 45;
		line-height: normal;
		font-weight: normal;

		@each $index, $size in $sizes {
			@media #{map.get($size, "media")} {
				font-size: pxToVw(list.nth($base-fs, $index), map.get($size, "target"));
			}
		}
	} @else if ($font == "title/h2") {
		// mobile-xs, mobile, tablet, desktop
		$base-fs: 32, 32, 32, 32;
		line-height: normal;
		font-weight: normal;

		@each $index, $size in $sizes {
			@media #{map.get($size, "media")} {
				font-size: pxToVw(list.nth($base-fs, $index), map.get($size, "target"));
			}
		}
	} @else if ($font == "title/h3") {
		// mobile-xs, mobile, tablet, desktop
		$base-fs: 24, 24, 24, 24;
		line-height: normal;
		font-weight: normal;

		@each $index, $size in $sizes {
			@media #{map.get($size, "media")} {
				font-size: pxToVw(list.nth($base-fs, $index), map.get($size, "target"));
			}
		}
	} @else if ($font == "title/h4") {
		// mobile-xs, mobile, tablet, desktop
		$base-fs: 20, 20, 20, 20;
		line-height: normal;
		font-weight: normal;

		@each $index, $size in $sizes {
			@media #{map.get($size, "media")} {
				font-size: pxToVw(list.nth($base-fs, $index), map.get($size, "target"));
			}
		}
	}
}

// CUSTOM PROPERTY
@mixin prop(
	$property,
	$coef: 1,
	$important: null,
	$base-length: (2, 2, 4, 4) /* mobile-xs, mobile, tablet, desktop */
) {
	@each $index, $size in $sizes {
		@media #{map.get($size, "media")} {
			#{$property}: pxToVw(
					list.nth($base-length, $index) * $coef,
					map.get($size, "target"),
					0.5
				)
				$important;
		}
	}
}

@mixin padding($coef: 1, $important: null) {
	@include prop("padding", $coef, $important);
}
@mixin gap($coef: 1, $important: null) {
	@include prop("gap", $coef, $important);
}

// BORDER
@mixin border-radius(
	$coef: 1,
	$side: "all",
	$base-radius: (
		8,
		12,
		12,
		16,
	)
	/* mobile-xs, mobile, tablet, desktop */
) {
	@each $index, $size in $sizes {
		@media #{map.get($size, "media")} {
			$radius: list.nth($base-radius, $index) * $coef;
			@if $side == "all" {
				border-radius: #{$radius}px;
			} @else if $side == "right" {
				border-top-right-radius: #{$radius}px;
				border-bottom-right-radius: #{$radius}px;
			} @else if $side == "left" {
				border-top-left-radius: #{$radius}px;
				border-bottom-left-radius: #{$radius}px;
			} @else if $side == "bottom" {
				border-bottom-right-radius: #{$radius}px;
				border-bottom-left-radius: #{$radius}px;
			} @else if $side == "top" {
				border-top-right-radius: #{$radius}px;
				border-top-left-radius: #{$radius}px;
			}
		}
	}
}

@mixin border($coef: 1, $color: null) {
	border: 1px solid;
	@if $color != null {
		border-color: $color;
	}
	@include border-radius($coef);
}

// POSITIONING
@mixin inset($arg: 0) {
	top: $arg;
	bottom: $arg;
	left: $arg;
	right: $arg;

	@supports (inset: $arg) {
		inset: $arg;
	}
}

// WRAPPER
@mixin wrapper($wrapper: 1440px, $coef: 8) {
	margin: 0 auto;
	max-width: $wrapper;
	width: 100%;

	@include prop("padding-inline", $coef);
}

// TRANSITION
@mixin transition(
	$properties: (
		all,
	),
	$durations: (),
	$easings: (),
	$delays: ()
) {
	$default-duration: 0.3s;
	$default-ease: ease-out;
	$default-delay: null;

	$transitions: ();

	@for $i from 1 through length($properties) {
		$transition: nth($properties, $i);

		@if (length($durations) >= $i) {
			$transition: append($transition, nth($durations, $i));
		} @else {
			$transition: append($transition, $default-duration);
		}

		@if (length($easings) >= $i) {
			$transition: append($transition, nth($easings, $i));
		} @else {
			$transition: append($transition, $default-ease);
		}

		@if (length($delays) >= $i) {
			$transition: append($transition, nth($delays, $i));
		} @else {
			$transition: append($transition, $default-delay);
		}

		$transitions: append($transitions, $transition, $separator: comma);
	}

	transition: $transitions;
}
